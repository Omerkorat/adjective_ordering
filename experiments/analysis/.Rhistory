demo <- subset(meta, select = -c(X_,destination,experimentName,time))
## add demo info to d
exp$age = demo$age[match(exp$userCode,demo$userCode)]
exp$born = demo$born[match(exp$userCode,demo$userCode)]
exp$first = demo$first[match(exp$userCode,demo$userCode)]
exp$home = demo$home[match(exp$userCode,demo$userCode)]
exp$live = demo$live[match(exp$userCode,demo$userCode)]
d <- exp
## only test trials
d = d[d$condition!='filler',]
d = d[d$condition!='',]
d = d[d$condition!='practice',]
## condition info
meta = read.csv("~/Dropbox/MashaLab/Quantifier\ Scope/HERENGextendedNEW/meta.csv",header=T)
d$experiment = meta$experiment[match(d$item,meta$item)]
d$ORDER = meta$ORDER[match(d$condition,meta$condition)]
d$INVERSE = meta$INVERSE[match(d$condition,meta$condition)]
d[d$experiment=="there" | d$experiment=="thereone",]$ORDER = "OE"
aggregate(response1~experiment*ORDER*INVERSE,data=d,mean)
aggregate(response1~experiment*ORDER*INVERSE,data=d,var)
## Some plots
rating <- d
rating$measure = "rating"
rating$inverse_name = "surf"
rating[rating$INVERSE==1,]$inverse_name = "inv"
rating$condition_name = paste(rating$experiment, rating$ORDER, rating$inverse_name, sep=" ")
table(rating$condition_name,rating$userCode)
head(d)
meta = read.csv("~/Dropbox/MashaLab/Quantifier\ Scope/HERENGextendedNEW/meta.csv",header=T)
head(meta)
d$experiment = meta$experiment[match(d$item,meta$item)]
d$ORDER = meta$ORDER[match(d$condition,meta$condition)]
d$ORDER
meta$ORDER
d$INVERSE = meta$INVERSE[match(d$condition,meta$condition)]
d$INVERSE
meta$INVERSE
match(d$condition,meta$condition)
match(d$item,meta$item)
nrow(d)
str(d)
str(meta)
meta$experiment[match(d$item,meta$item)]
meta$ORDER[match(d$condition,meta$condition)]
meta$INVERSE[match(d$condition,meta$condition)]
setwd("~/Dropbox/MashaLab/Quantifier\ Scope/HERENGextendedNEW/")
bootsSummary <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE, n_boots_samps=1000) {
require(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
bootsci_high = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["97.5%"]],
bootsci_low = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["2.5%"]]
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
return(datac)
}
library(ggplot2)
# where your experiment is hosted
experigen.sourceURL = "web.stanford.edu.scontras.HERENGextendedNEW.web"
# this information comes from your settings.js file
experigen.experimentName = "HeritageEnglishExtended"
experigen.database = "http://db.phonologist.org/"
# check for usage of the experiment (number of page views per participant)
experigen.users  =  paste(experigen.database, "users.cgi?experimentName=", experigen.experimentName, "&sourceurl=", experigen.sourceURL, sep="")
read.csv(experigen.users, sep="\t")
# read the experimental results from the server
experigen.url  =  paste(experigen.database, "makecsv.cgi?experimentName=", experigen.experimentName, "&sourceurl=", experigen.sourceURL, sep="")
exp  = read.csv(experigen.url, sep="\t")
#demographic data
meta = read.csv(paste(experigen.url, "&file=demographics.csv", sep=""), sep="\t")
meta$time = as.POSIXct(strptime(as.character(meta$time), "%a %b %d %H:%M:%S %Y"))
#write.csv(exp,"HERENGextended.csv")
head(exp)
head(meta)
# Add demographic info
demo <- subset(meta, select = -c(X_,destination,experimentName,time))
## add demo info to d
exp$age = demo$age[match(exp$userCode,demo$userCode)]
exp$born = demo$born[match(exp$userCode,demo$userCode)]
exp$first = demo$first[match(exp$userCode,demo$userCode)]
exp$home = demo$home[match(exp$userCode,demo$userCode)]
exp$live = demo$live[match(exp$userCode,demo$userCode)]
d <- exp
## only test trials
d = d[d$condition!='filler',]
d = d[d$condition!='',]
d = d[d$condition!='practice',]
## condition info
meta = read.csv("~/Dropbox/MashaLab/Quantifier\ Scope/HERENGextendedNEW/meta.csv",header=T)
d$experiment = meta$experiment[match(d$item,meta$item)]
d$ORDER = meta$ORDER[match(d$condition,meta$condition)]
d$INVERSE = meta$INVERSE[match(d$condition,meta$condition)]
d[d$experiment=="there" | d$experiment=="thereone",]$ORDER = "OE"
aggregate(response1~experiment*ORDER*INVERSE,data=d,mean)
aggregate(response1~experiment*ORDER*INVERSE,data=d,var)
## Some plots
rating <- d
rating$measure = "rating"
rating$inverse_name = "surf"
rating[rating$INVERSE==1,]$inverse_name = "inv"
rating$condition_name = paste(rating$experiment, rating$ORDER, rating$inverse_name, sep=" ")
table(rating$condition_name,rating$userCode)
aggregate(response1~experiment*ORDER*INVERSE,data=d,mean)
aggregate(response1~experiment*ORDER*INVERSE,data=d,var)
meta$item
meta$condition
summary(meta)
summary(d)
d$ORDER = meta$ORDER[match(as.character(d$condition),as.character(meta$condition))]
d$ORDER
as.character(d$condition)
as.character(meta$condition)
meta$ORDER[match(as.character(d$condition),as.character(meta$condition))]
match(as.character(d$condition),as.character(meta$condition))
d$ORDER = meta$ORDER[match(as.factor(d$condition),as.character(meta$condition))]
d$ORDER
d$ORDER = meta$ORDER[match(as.factor(d$condition),as.factor(meta$condition))]
d$ORDER
head(meta)
meta[meta$ORDER=="EO",]
d[d$item > 16,]
d[as.numeric(as.character(d$item)) > 16,]
?match
d$itemcond = paste(d$item,d$condition)
head(meta)
meta$itemcond = paste(meta$item,meta$condition)
d$experiment = meta$experiment[match(d$itemcond,meta$itemcond)]
head(d)
d$ORDER = meta$ORDER[match(d$itemcond,meta$itemcond))]
d$ORDER = meta$ORDER[match(d$itemcond,meta$itemcond)]
d$ORDER
d$INVERSE = meta$INVERSE[match(d$itemcond,meta$itemcond)]
d[d$experiment=="there" | d$experiment=="thereone",]$ORDER = "OE"
aggregate(response1~experiment*ORDER*INVERSE,data=d,mean)
aggregate(response1~experiment*ORDER*INVERSE,data=d,var)
## Some plots
rating <- d
rating$measure = "rating"
rating$inverse_name = "surf"
rating[rating$INVERSE==1,]$inverse_name = "inv"
rating$condition_name = paste(rating$experiment, rating$ORDER, rating$inverse_name, sep=" ")
table(rating$condition_name,rating$userCode)
setwd("~/Dropbox/MashaLab/Quantifier\ Scope/HERENGextended/")
bootsSummary <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE, n_boots_samps=1000) {
require(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
bootsci_high = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["97.5%"]],
bootsci_low = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["2.5%"]]
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
return(datac)
}
library(ggplot2)
# where your experiment is hosted
experigen.sourceURL = "web.stanford.edu.scontras.HERENGextended.web"
# this information comes from your settings.js file
experigen.experimentName = "HeritageEnglishExtended"
experigen.database = "http://db.phonologist.org/"
# check for usage of the experiment (number of page views per participant)
experigen.users  =  paste(experigen.database, "users.cgi?experimentName=", experigen.experimentName, "&sourceurl=", experigen.sourceURL, sep="")
read.csv(experigen.users, sep="\t")
# read the experimental results from the server
experigen.url  =  paste(experigen.database, "makecsv.cgi?experimentName=", experigen.experimentName, "&sourceurl=", experigen.sourceURL, sep="")
exp  = read.csv(experigen.url, sep="\t")
#demographic data
meta = read.csv(paste(experigen.url, "&file=demographics.csv", sep=""), sep="\t")
meta$time = as.POSIXct(strptime(as.character(meta$time), "%a %b %d %H:%M:%S %Y"))
#write.csv(exp,"HERENGextended.csv")
head(exp)
head(meta)
# Add demographic info
demo <- subset(meta, select = -c(X_,destination,experimentName,time))
## add demo info to d
exp$age = demo$age[match(exp$userCode,demo$userCode)]
exp$born = demo$born[match(exp$userCode,demo$userCode)]
exp$first = demo$first[match(exp$userCode,demo$userCode)]
exp$home = demo$home[match(exp$userCode,demo$userCode)]
exp$live = demo$live[match(exp$userCode,demo$userCode)]
## GOOD USER CODES
# LQL10
# PPS10
# DOJ11
# TLG13
#d = exp[exp$userCode == "LQL10" | exp$userCode == "PPS10" | exp$userCode == "DOJ11" | exp$userCode == "TLG13",]
d <- exp
## only test trials
d = d[d$condition!='filler',]
d = d[d$condition!='',]
d = d[d$condition!='practice',]
## condition info
meta = read.csv("~/Dropbox/MashaLab/Quantifier\ Scope/HERENGextended/meta.csv",header=T)
d$itemcond = paste(d$item,d$condition)
meta$itemcond = paste(meta$item,meta$condition)
d$experiment = meta$experiment[match(d$itemcond,meta$itemcond)]
d$ORDER = meta$ORDER[match(d$itemcond,meta$itemcond)]
d$INVERSE = meta$INVERSE[match(d$itemcond,meta$itemcond)]
d[d$experiment=="there" | d$experiment=="thereone",]$ORDER = "OE"
aggregate(response1~experiment*ORDER*INVERSE,data=d,mean)
aggregate(response1~experiment*ORDER*INVERSE,data=d,var)
## Some plots
rating <- d
rating$measure = "rating"
rating$inverse_name = "surf"
rating[rating$INVERSE==1,]$inverse_name = "inv"
rating$condition_name = paste(rating$experiment, rating$ORDER, rating$inverse_name, sep=" ")
rating_s = bootsSummary(data=rating, measurevar="response1", groupvars=c("ORDER","INVERSE","experiment"))
rating_plot <- ggplot(rating_s, aes(x=ORDER,y=response1,fill=factor(INVERSE,labels=c("SURFACE","INVERSE")))) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=ORDER, width=0.1),position=position_dodge(width=0.9))+
ylab("rating \n")+
xlab("\n order")+coord_cartesian(ylim=c(1,7))
rating_plot <- rating_plot  +facet_grid(~ experiment)+ labs(fill="scope")+ggtitle("Heritage English ratings (1-7)")
#+ theme_blackDisplay()
rating_plot
d = exp[exp$userCode == "LQL10" | exp$userCode == "PPS10" | exp$userCode == "DOJ11" | exp$userCode == "TLG13",]
#d <- exp
## only test trials
d = d[d$condition!='filler',]
d = d[d$condition!='',]
d = d[d$condition!='practice',]
## condition info
meta = read.csv("~/Dropbox/MashaLab/Quantifier\ Scope/HERENGextended/meta.csv",header=T)
d$itemcond = paste(d$item,d$condition)
meta$itemcond = paste(meta$item,meta$condition)
d$experiment = meta$experiment[match(d$itemcond,meta$itemcond)]
d$ORDER = meta$ORDER[match(d$itemcond,meta$itemcond)]
d$INVERSE = meta$INVERSE[match(d$itemcond,meta$itemcond)]
d[d$experiment=="there" | d$experiment=="thereone",]$ORDER = "OE"
aggregate(response1~experiment*ORDER*INVERSE,data=d,mean)
aggregate(response1~experiment*ORDER*INVERSE,data=d,var)
## Some plots
rating <- d
rating$measure = "rating"
rating$inverse_name = "surf"
rating[rating$INVERSE==1,]$inverse_name = "inv"
rating$condition_name = paste(rating$experiment, rating$ORDER, rating$inverse_name, sep=" ")
rating_s = bootsSummary(data=rating, measurevar="response1", groupvars=c("ORDER","INVERSE","experiment"))
rating_plot <- ggplot(rating_s, aes(x=ORDER,y=response1,fill=factor(INVERSE,labels=c("SURFACE","INVERSE")))) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=ORDER, width=0.1),position=position_dodge(width=0.9))+
ylab("rating \n")+
xlab("\n order")+coord_cartesian(ylim=c(1,7))
rating_plot <- rating_plot  +facet_grid(~ experiment)+ labs(fill="scope")+ggtitle("Heritage English ratings (1-7)")
#+ theme_blackDisplay()
rating_plot
setwd("~/Dropbox/MashaLab/Quantifier\ Scope/HERENGextendedNEW/")
bootsSummary <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE, n_boots_samps=1000) {
require(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
bootsci_high = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["97.5%"]],
bootsci_low = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["2.5%"]]
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
return(datac)
}
library(ggplot2)
# where your experiment is hosted
experigen.sourceURL = "web.stanford.edu.scontras.HERENGextendedNEW.web"
# this information comes from your settings.js file
experigen.experimentName = "HeritageEnglishExtended"
experigen.database = "http://db.phonologist.org/"
# check for usage of the experiment (number of page views per participant)
experigen.users  =  paste(experigen.database, "users.cgi?experimentName=", experigen.experimentName, "&sourceurl=", experigen.sourceURL, sep="")
read.csv(experigen.users, sep="\t")
# read the experimental results from the server
experigen.url  =  paste(experigen.database, "makecsv.cgi?experimentName=", experigen.experimentName, "&sourceurl=", experigen.sourceURL, sep="")
exp  = read.csv(experigen.url, sep="\t")
#demographic data
meta = read.csv(paste(experigen.url, "&file=demographics.csv", sep=""), sep="\t")
meta$time = as.POSIXct(strptime(as.character(meta$time), "%a %b %d %H:%M:%S %Y"))
#write.csv(exp,"HERENGextended.csv")
head(exp)
head(meta)
# Add demographic info
demo <- subset(meta, select = -c(X_,destination,experimentName,time))
## add demo info to d
exp$age = demo$age[match(exp$userCode,demo$userCode)]
exp$born = demo$born[match(exp$userCode,demo$userCode)]
exp$first = demo$first[match(exp$userCode,demo$userCode)]
exp$home = demo$home[match(exp$userCode,demo$userCode)]
exp$live = demo$live[match(exp$userCode,demo$userCode)]
d <- exp
## only test trials
d = d[d$condition!='filler',]
d = d[d$condition!='',]
d = d[d$condition!='practice',]
## condition info
meta = read.csv("~/Dropbox/MashaLab/Quantifier\ Scope/HERENGextendedNEW/meta.csv",header=T)
d$itemcond = paste(d$item,d$condition)
meta$itemcond = paste(meta$item,meta$condition)
d$experiment = meta$experiment[match(d$itemcond,meta$itemcond)]
d$ORDER = meta$ORDER[match(d$itemcond,meta$itemcond)]
d$INVERSE = meta$INVERSE[match(d$itemcond,meta$itemcond)]
d[d$experiment=="there" | d$experiment=="thereone",]$ORDER = "OE"
aggregate(response1~experiment*ORDER*INVERSE,data=d,mean)
aggregate(response1~experiment*ORDER*INVERSE,data=d,var)
## Some plots
rating <- d
rating$measure = "rating"
rating$inverse_name = "surf"
rating[rating$INVERSE==1,]$inverse_name = "inv"
rating$condition_name = paste(rating$experiment, rating$ORDER, rating$inverse_name, sep=" ")
table(rating$condition_name,rating$userCode)
setwd("~/Dropbox/MashaLab/Quantifier\ Scope/HERENGextendedNEW/")
bootsSummary <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE, n_boots_samps=1000) {
require(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
bootsci_high = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["97.5%"]],
bootsci_low = quantile( #doesn't play nice with na.rm
replicate(n_boots_samps, mean(sample(xx[[col]], replace = TRUE))),
c(0.025, 0.975))[["2.5%"]]
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
return(datac)
}
library(ggplot2)
# where your experiment is hosted
experigen.sourceURL = "web.stanford.edu.scontras.HERENGextendedNEW.web"
# this information comes from your settings.js file
experigen.experimentName = "HeritageEnglishExtended"
experigen.database = "http://db.phonologist.org/"
# check for usage of the experiment (number of page views per participant)
experigen.users  =  paste(experigen.database, "users.cgi?experimentName=", experigen.experimentName, "&sourceurl=", experigen.sourceURL, sep="")
read.csv(experigen.users, sep="\t")
# read the experimental results from the server
experigen.url  =  paste(experigen.database, "makecsv.cgi?experimentName=", experigen.experimentName, "&sourceurl=", experigen.sourceURL, sep="")
exp  = read.csv(experigen.url, sep="\t")
#demographic data
meta = read.csv(paste(experigen.url, "&file=demographics.csv", sep=""), sep="\t")
meta$time = as.POSIXct(strptime(as.character(meta$time), "%a %b %d %H:%M:%S %Y"))
#write.csv(exp,"HERENGextended.csv")
head(exp)
head(meta)
library(hydroGOF)
library(ggplot2)
setwd("~/Documents/git/cocolab/adjective_ordering/experiments/analysis")
# Bootstrap 95% CI for R-Squared
library(boot)
# function to obtain R-Squared from the data
rsq <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data=d)
return(summary(fit)$r.square)
}
source("splithalf.R")
source("helpers.R")
o = read.csv("~/Documents/git/cocolab/adjective_ordering/experiments/analysis/naturalness-duplicated.csv",header=T)
o = read.csv("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/analysis/naturalness-duplicated.csv",header=T)
head(o)
o_agr_pred = aggregate(correctresponse~predicate*correctclass*nounclass,data=o,mean)
o_agr_class = aggregate(correctresponse~correctclass*nounclass,data=o,mean)
head(o_agr_pred)
head(o_agr_class)
head(o)
head(o)
o = read.csv("~/Documents/git/cocolab/adjective_ordering/experiments/analysis/naturalness-duplicated.csv",header=T)
head(o)
lmer(correctresponse~predicate+(1+predicate|noun),data=o)
model = lmer(correctresponse~predicate+(1+predicate|noun),data=o)
summary(model)
a_model = lmer(correctresponse~predicate,data=o)
summary(a_model)
anova(a_model,model)
a_model = lmer(correctresponse~predicate + (1|noun),data=o)
summary(a_model)
anova(a_model,model)
head(o)
table(o$predicate,o$noun)
head(o)
model = lmer(correctresponse~correctclass+(1+correctclass|nounclass),data=o)
summary(model)
a_model = lmer(correctresponse~correctclass + (1|nounclass),data=o)
summary(a_model)
anova(a_model,model)
model = lmer(correctresponse~correctclass+(1+correctclass|noun),data=o)
summary(model)
a_model = lmer(correctresponse~correctclass + (1|noun),data=o)
summary(a_model)
anova(a_model,model)
model = lmer(correctresponse~predicate+(1+predicate|nounclass),data=o)
model = lmer(correctresponse~correctclass+(1+correctclass|noun),data=o)
head(o)
model = lmer(correctresponse~correctclass+(1+correctclass|noun),data=o)
table(o$correctclass,o$noun)
table(o$correctclass,o$nounclass)
model = lmer(correctresponse~correctclass+(1+correctclass|nounclass),data=o)
summary(model)
a_model = lmer(correctresponse~correctclass + (1|nounclass),data=o)
summary(a_model)
anova(a_model,model)
table(o$correctclass,o$nounclass)
50/3
3/50
100/.06
summary(model)
model.0 = lmer(correctresponse~(1+correctclass|nounclass),data=o)
model.0 = lmer(correctresponse~(1|nounclass),data=o)
summary(model.0)
model.0 = lmer(correctresponse~(1|noun),data=o)
summary(model.0)
model.0 = lmer(correctresponse~predicate + (1|noun),data=o)
summary(model.0)
model.0 = lmer(correctresponse~(1|noun),data=o)
model.1 = lmer(correctresponse~predicate + (1|noun),data=o)
anova(model.0,model.1)
summary(model.1)
model.3 = lmer(correctresponse~(1|predicate),data=o)
summary(model.3)
model.4 = lmer(correctresponse~noun + (1|predicate),data=o)
summary(model.4)
anova(model.3,model.4)
model.4 = lmer(correctresponse~noun + (1+noun|predicate),data=o)
table(o$predicate,o$noun)
summary(model.4)
model.6 = glm(correctresponse~noun*adjective, data=o)
model.6 = glm(correctresponse~noun*predicate, data=o)
summary(model.6)
contrasts(o$noun)
contrasts(o$predicate)
model.7 = glm(correctresponse~predicate, data=o)
anova(model.7,model.6)
model.6 = lm(correctresponse~noun*predicate, data=o)
summary(model.6)
model.7 = lm(correctresponse~predicate, data=o)
anova(model.7,model.6)
model.8 = lm(correctresponse~,data=o)
model.8 = lm(correctresponse~1,data=o)
anova(model.8,model.7)
model.9 = lm(correctresponse~noun,data=o)
anova(model.9,model.8)
model.10 = lm(correctresponse~noun+predicate, data=o)
anova(model.7,model.10)
model.11 = lm(correctresponse~noun:predicate, data=o)
model.11 = lm(correctresponse~predicate+noun:predicate, data=o)
anova(model.7,model.11)
summary(model.7)
summary(model.11)
