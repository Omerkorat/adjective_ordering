for (i in 2:nsim){
y[i]=rnorm(1,mean=x[i-1],sd=1)
x[i]=y[i]
}
plot(seq(1,500),x)
for (i in 2:nsim){
y[i]=rnorm(1,mean=x[i-1],sd=1)
x[i]=y[i]
}
plot(seq(1,500),x)
for (i in 2:nsim){
y[i]=rnorm(1,mean=x[i-1],sd=1)
x[i]=y[i]
}
plot(seq(1,500),x)
u=runif(1000,min=0,max=1)
summary(u)
x = runif(1,0,5)
x
x = runif(1,0,5)
x
fn(x)
install.packages("broom")
library(broom)
m = lm(mpg~wt,mtcars)
m
summary(m)
tidy(m)
str(tidy(m))
head(mtcars)
m = lmer(mpg~wt+(1|gear),mtcars)
summary(m)
tidy(m)
290*1/3
290/6
290+97+48
24000/8
total = 13
moonah = 99
alohamia = 80
murder50 = 95
swelldot = 104
elecmadness = 105
tropical = 100
moonah_n = 1
alohamia_n = 4
murder50_n = 3
swelldot_n = 2
elecmadness_n = 1
tropical_n = 2
moonah_mu = moonah + moonah_n*(moonah/(total-moonah_n))
alohamia_mu = alohamia + alohamia_n*(alohamia/(total-alohamia_n))
murder50_mu = murder50 + murder50_n*(murder50/(total-murder50_n))
swelldot_mu = swelldot + swelldot_n*(swelldot/(total-swelldot_n))
elecmadness_mu = elecmadness + elecmadness_n*(elecmadness/(total-elecmadness_n))
tropical_mu = tropical + tropical_n*(tropical/(total-tropical_n))
moonah_mu = moonah + moonah_n*(moonah/(total-moonah_n))
moonah_mu
alohamia_mu = alohamia + alohamia_n*(alohamia/(total-alohamia_n))
alohamia_mu
murder50_mu = murder50 + murder50_n*(murder50/(total-murder50_n))
murder50_mu
swelldot_mu = swelldot + swelldot_n*(swelldot/(total-swelldot_n))
swelldot_mu
elecmadness_mu = elecmadness + elecmadness_n*(elecmadness/(total-elecmadness_n))
elecmadness_mu
tropical_mu = tropical + tropical_n*(tropical/(total-tropical_n))
tropical_mu
99/120
80/90
moonah_mu = moonah + moonah_n*(moonah/(total-moonah_n))
moonah_mu
alohamia_mu = alohamia + alohamia_n*(alohamia/(total-alohamia_n))
alohamia_mu
murder50_mu = murder50 + murder50_n*(murder50/(total-murder50_n))
murder50_mu
swelldot_mu = swelldot + swelldot_n*(swelldot/(total-swelldot_n))
swelldot_mu
elecmadness_mu = elecmadness + elecmadness_n*(elecmadness/(total-elecmadness_n))
elecmadness_mu
tropical_mu = tropical + tropical_n*(tropical/(total-tropical_n))
tropical_mu
moonah = 99/120
moonah
alohamia = 80/90
alohamia
murder = 95/100
murder
swelldot = 104/110
swelldot
electronic = 105/120
electronic
tropical = 100/110
tropical
theme_set(theme_bw(18))
setwd("/Users/titlis/cogsci/projects/partitivesome/corpus/")
source("rscripts/helpers.r")
d = read.table("data/all/swbdext.tab",sep="\t",header=T,quote="")
nrow(d)
head(d)
summary(d)
head = d %>%
group_by(Partitive) %>%
summarise(MeanCndP=mean(CndP_Head),CiLowCndP=ci.low(CndP_Head),CiHighCndP=ci.high(CndP_Head),MeanInfo=mean(Information_Head_3gram),CiLowInfo=ci.low(Information_Head_3gram),CiHighInfo=ci.high(Information_Head_3gram))
head(head)
head(d[is.na(d$CndP_Head),])
nrow(d)
d = droplevels(d[d$Head != "",])
nrow(d)
head = d %>%
group_by(Partitive) %>%
summarise(MeanCndP=mean(CndP_Head),CiLowCndP=ci.low(CndP_Head),CiHighCndP=ci.high(CndP_Head),MeanInfo=mean(Information_Head_3gram),CiLowInfo=ci.low(Information_Head_3gram),CiHighInfo=ci.high(Information_Head_3gram))
head(head)
summary(d)
head(d[is.na(d$CndP_Head),])
d = droplevels(d[d$Head != "" & grep("--n",d$Head) > -1,])
d = droplevels(d[d$Head != "" & grep("--n",d$Head) == -1,])
grep("--n",d$Head)
grep("--n",d$Head,fixed=T)
grep("--n",as.character(d$Head),fixed=T)
grep("places",as.character(d$Head),fixed=T)
grep("places",d$Head,fixed=T)
grep("places",d$Head,fixed=F)
startsWith("--n",d$Head)
library(gdata)
startsWith("--n",d$Head)
startsWith("--n",as.character(d$Head))
grep("places",d$Head,fixed=F)
grep("places",d$Head[1],fixed=F)
head(d$Head)
d = read.table("data/all/swbdext.tab",sep="\t",header=T,quote="")
nrow(d)
head(d)
summary(d)
head(d$Head)
grep("places",d$Head[1],fixed=F)
grep("places",d$Head,fixed=F)
grep("--n",d$Head,fixed=F)
d = droplevels(d[d$Head != "" & !grep("--n",d$Head),])
grep("--n",d$Head)
d = read.table("data/all/swbdext.tab",sep="\t",header=T,quote="")
nrow(d)
head(d)
d[grep("--n",d$Head),]
d[!grep("--n",d$Head),]
d[grep("--n",d$Head),]
?grep
str(grep("--n",d$Head))
d[-grep("--n",d$Head,]
d[-grep("--n",d$Head),]
nrow(d[-grep("--n",d$Head),])
nrow(d)
length(grep("--n",d$Head))
nrow(d)
d = droplevels(d[d$Head != "" & -grep("--n",d$Head),])
d = read.table("data/all/swbdext.tab",sep="\t",header=T,quote="")
nrow(d)
head(d)
summary(d)
nrow(d)
d = droplevels(d[-grep("--n",d$Head),])
nrow(d)
d = droplevels(d[d$Head != "",])
nrow(d)
head = d %>%
group_by(Partitive) %>%
summarise(MeanCndP=mean(CndP_Head),CiLowCndP=ci.low(CndP_Head),CiHighCndP=ci.high(CndP_Head),MeanInfo=mean(Information_Head_3gram),CiLowInfo=ci.low(Information_Head_3gram),CiHighInfo=ci.high(Information_Head_3gram))
head(head)
ggplot(head,aes(x=Partitive,y=MeanCndP)) +
geom_bar(fill="gray60",stat="identity") +
geom_errorbar(aes(ymin=MeanCndP-CiLowCndP,ymax=MeanCndP+CiHighCndP))
ggplot(head,aes(x=Partitive,y=MeanCndP)) +
geom_bar(fill="gray60",stat="identity") +
geom_errorbar(aes(ymin=MeanCndP-CiLowCndP,ymax=MeanCndP+CiHighCndP),width=.25)
ggplot(head,aes(x=Partitive,y=MeanInfo)) +
geom_bar(fill="gray60",stat="identity") +
geom_errorbar(aes(ymin=MeanInfo-CiLowInfo,ymax=MeanInfo+CiHighInfo),width=.25)
head(d)
head = d %>%
group_by(Partitive) %>%
summarise(MeanCndP=mean(CndP_Head),CiLowCndP=ci.low(CndP_Head),CiHighCndP=ci.high(CndP_Head),MeanInfo=mean(Information_Head_3gram),CiLowInfo=ci.low(Information_Head_3gram),CiHighInfo=ci.high(Information_Head_3gram),MeanP=mean(P_Head),CiLowP=ci.low(P_Head),CiHighP=ci.high(P_Head))
head(head)
head=as.data.frame(head)
ggplot(head,aes(x=Partitive,y=MeanCndP)) +
geom_bar(fill="gray60",stat="identity") +
geom_errorbar(aes(ymin=MeanCndP-CiLowCndP,ymax=MeanCndP+CiHighCndP),width=.25)
ggplot(head,aes(x=Partitive,y=MeanInfo)) +
geom_bar(fill="gray60",stat="identity") +
geom_errorbar(aes(ymin=MeanInfo-CiLowInfo,ymax=MeanInfo+CiHighInfo),width=.25)
ggplot(head,aes(x=Partitive,y=MeanP)) +
geom_bar(fill="gray60",stat="identity") +
geom_errorbar(aes(ymin=MeanP-CiLowP,ymax=MeanInfo+CiHighP),width=.25)
ggplot(head,aes(x=Partitive,y=MeanP)) +
geom_bar(fill="gray60",stat="identity") +
geom_errorbar(aes(ymin=MeanP-CiLowP,ymax=MeanP+CiHighP),width=.25)
sample(d,50)
?sample
sample(paste(d$Sentence,d$Head),50)
sample(paste(d$Sentence,d$Head,d$Partitive),50)
library(hydroGOF)
library(ggplot2)
setwd("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/analysis")
# Bootstrap 95% CI for R-Squared
library(boot)
# function to obtain R-Squared from the data
rsq <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data=d)
return(summary(fit)$r.square)
}
source("splithalf.R")
source("helpers.R")
#############################################
o = read.csv("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/analysis/naturalness-duplicated.csv",header=T)
head(o)
o_agr_pred = aggregate(correctresponse~predicate*correctclass*nounclass,data=o,mean)
o_agr_class = aggregate(correctresponse~correctclass*nounclass,data=o,mean)
head(o_agr_pred)
head(o_agr_class)
f = read.csv("faultless_results.csv",header=T)
head(f)
f_agr_pred = aggregate(response~predicate,data=f,mean)
f_agr_class = aggregate(response~class,data=f,mean)
s = read.csv("subjectivity_results.csv",header=T)
head(s)
s_agr_pred = aggregate(response~predicate,data=s,mean)
s_agr_class = aggregate(response~class,data=s,mean)
o = read.csv("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/analysis/naturalness-duplicated.csv",header=T)
head(o)
o_agr_pred = aggregate(correctresponse~predicate*correctclass,data=o,mean)
o_agr_class = aggregate(correctresponse~correctclass,data=o,mean)
s = read.table("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/6-subjectivity/Submiterator-master/subjectivity-trials.tsv",sep="\t",header=T)
s = read.table("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/6-subjectivity/Submiterator-master/subjectivity-trials.csv",sep="\t",header=T)
s_sub = read.table("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/6-subjectivity/Submiterator-master/subjectivity-subject_information.tsv",sep="\t",header=T)
sn = read.table("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/7-subjectivity-noun/Submiterator-master/subjectivity-trials.tsv",sep="\t",header=T)
sn = read.table("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/7-subjectivity-noun/Submiterator-master/subjectivity-trials.csv",sep="\t",header=T)
sn = read.table("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/7-subjectivity-noun/subjectivity-trials.csv",sep="\t",header=T)
sn_sub = read.table("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/7-subjectivity-noun/Submiterator-master/subjectivity-subject_information.csv",sep="\t",header=T)
sn = read.table("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/7-subjectivity-noun/Submiterator-master/subjectivity-trials.csv",sep="\t",header=T)
head(sn)
head(sn_sub)
o = read.csv("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/analysis/naturalness-duplicated.csv",header=T)
head(o)
#### without noun info
o_agr_pred = aggregate(correctresponse~predicate*correctclass,data=o,mean)
o_agr_class = aggregate(correctresponse~correctclass,data=o,mean)
head(o_agr_pred)
head(o_agr_class)
## faultless
f = read.csv("faultless_results.csv",header=T)
head(f)
f_agr_pred = aggregate(response~predicate*class,data=f,mean)
f_agr_class = aggregate(response~class,data=f,mean)
gof(o_agr_pred$correctresponse,f_agr_pred$response) # r = 0.94, r2 = 0.88
gof(o_agr_class$correctresponse,f_agr_class$response) # r = 0.93, r2 = 0.86
#### with noun info
o_agr_pred = aggregate(correctresponse~predicate*correctclass*noun,data=o,mean)
o_agr_class = aggregate(correctresponse~correctclass*noun,data=o,mean)
head(o_agr_pred)
head(o_agr_class)
o_agr_pred$pred_noun = paste(o_agr_pred$predicate,o_agr_pred$noun)
o_agr_class$class_noun = paste(o_agr_class$correctclass,o_agr_class$noun)
## faultless
f = read.csv("faultless_results.csv",header=T)
head(f)
f_agr_pred = aggregate(response~predicate*class*noun,data=f,mean)
f_agr_pred_no_noun = aggregate(response~predicate*class,data=f,mean)
f_agr_class = aggregate(response~class*noun,data=f,mean)
f_agr_class_no_noun = aggregate(response~class,data=f,mean)
f_agr_pred$pred_noun = paste(f_agr_pred$predicate,f_agr_pred$noun)
f_agr_class$class_noun = paste(f_agr_class$class,f_agr_class$noun)
o_agr_pred$faultless_noun = f_agr_pred$response[match(o_agr_pred$pred_noun,f_agr_pred$pred_noun)]
o_agr_pred$faultless = f_agr_pred_no_noun$response[match(o_agr_pred$predicate,f_agr_pred_no_noun$predicate)]
o_agr_class$faultless_noun = f_agr_class$response[match(o_agr_class$class_noun,f_agr_class$class_noun)]
o_agr_class$faultless = f_agr_class_no_noun$response[match(o_agr_class$correctclass,f_agr_class_no_noun$class)]
gof(o_agr_pred$correctresponse,o_agr_pred$faultless_noun) # r = 0.67, r2 = 0.45
results <- boot(data=o_agr_pred, statistic=rsq, R=10000, formula=correctresponse~faultless_noun)
boot.ci(results, type="bca") # 95%   ( 0.3470,  0.5401 )
gof(o_agr_pred$correctresponse,o_agr_pred$faultless) # r = 0.84, r2 = 0.70
results <- boot(data=o_agr_pred, statistic=rsq, R=10000, formula=correctresponse~faultless)
boot.ci(results, type="bca") # 95%   ( 0.6264,  0.7585 )
gof(o_agr_class$correctresponse,o_agr_class$faultless_noun) # r = 0.83, r2 = 0.68
results <- boot(data=o_agr_class, statistic=rsq, R=10000, formula=correctresponse~faultless_noun)
boot.ci(results, type="bca") # 95%   ( 0.5366,  0.7821 )
gof(o_agr_class$correctresponse,o_agr_class$faultless) # r = 0.89, r2 = 0.80
results <- boot(data=o_agr_class, statistic=rsq, R=10000, formula=correctresponse~faultless)
boot.ci(results, type="bca") # 95%   ( 0.6788,  0.8720 )
hea(o)
head(o)
?glmer
?lrm
?lm
m = lm(correctresponse ~ faultless, data=o_agr_pred)
summary(m)
m = lm(correctresponse ~ faultless_noun, data=o_agr_pred)
summary(m)
m.adj = lm(correctresponse ~ faultless, data=o_agr_pred)
summary(m.adj)
m.adj.noun = lm(correctresponse ~ faultless_noun, data=o_agr_pred)
summary(m.adj.noun)
m.adj.noun = lm(correctresponse ~ faultless + faultless_noun, data=o_agr_pred)
summary(m.adj.noun)
anova(m.adj,m.adj.noun)
summary(m.adj)
summary(o_agr_pred)
summary(o_agr_class)
d = droplevels(o_agr_pred[!is.na(o_agr_pred$faultless_noun),])
m.adj = lm(correctresponse ~ faultless, data=d)
summary(m.adj)
m.adj.noun = lm(correctresponse ~ faultless + faultless_noun, data=d)
summary(m.adj.noun)
anova(m.adj,m.adj.noun)
head(o_agr_class)
summary(o_agr_class)
d = droplevels(o_agr_class[!is.na(o_agr_class$faultless_noun),])
m.adj = lm(correctresponse ~ faultless, data=d)
summary(m.adj)
m.adj.noun = lm(correctresponse ~ faultless + faultless_noun, data=d)
summary(m.adj.noun)
anova(m.adj,m.adj.noun) # no value in adding faultless_noun
d = droplevels(o_agr_pred[!is.na(o_agr_pred$faultless_noun),])
m.adj = lm(correctresponse ~ faultless, data=d)
summary(m.adj)
m.adj.noun = lm(correctresponse ~ faultless + faultless_noun, data=d)
summary(m.adj.noun)
anova(m.adj,m.adj.noun)
d = droplevels(o_agr_class[!is.na(o_agr_class$faultless_noun),])
m.adj = lm(correctresponse ~ faultless, data=d)
summary(m.adj)
m.adj.noun = lm(correctresponse ~ faultless + faultless_noun, data=d)
summary(m.adj.noun)
anova(m.adj,m.adj.noun) # no value in adding faultless_noun
nrow(o_agr_class)
nrow(o_agr_pred)
d = droplevels(o_agr_class[!is.na(o_agr_class$faultless_noun),])
m.adj = lm(correctresponse ~ faultless, data=d)
summary(m.adj)
m.adj.noun = lm(correctresponse ~ faultless + faultless_noun, data=d)
summary(m.adj.noun)
anova(m.adj,m.adj.noun) # no value in adding faultless_noun
d = droplevels(o_agr_pred[!is.na(o_agr_pred$faultless_noun),])
m.adj = lm(correctresponse ~ faultless, data=d)
summary(m.adj)
m.adj.noun = lm(correctresponse ~ faultless + faultless_noun, data=d)
summary(m.adj.noun)
d = droplevels(o_agr_class[!is.na(o_agr_class$faultless_noun),])
m.adj = lm(correctresponse ~ faultless, data=d)
summary(m.adj)
m.adj.noun = lm(correctresponse ~ faultless + faultless_noun, data=d)
summary(m.adj.noun)
anova(m.adj,m.adj.noun) # no value in adding faultless_noun
library(hydroGOF)
library(ggplot2)
setwd("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/analysis")
# Bootstrap 95% CI for R-Squared
library(boot)
# function to obtain R-Squared from the data
rsq <- function(formula, data, indices) {
d <- data[indices,] # allows boot to select sample
fit <- lm(formula, data=d)
return(summary(fit)$r.square)
}
source("splithalf.R")
source("helpers.R")
o = read.csv("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/analysis/naturalness-duplicated.csv",header=T)
head(o)
f = read.csv("faultless_results.csv",header=T)
head(f)
length(unique(f$workerid))
workerids = unique(f$workerid)
str(workerids)
?sample
i = 1
wids = sample(workerids,30)
wids
nrow(f)
nrow(f[f$workerid %in% wids,])
head(f[f$workerid %in% wids,])
wids = sample(workerids,30)
wids
head(f[f$workerid %in% wids,])
wids = sample(workerids,30)
wids
wids = sample(workerids,30)
wids
wids = sample(workerids,30)
wids
wids = sample(workerids,30)
wids
wids = sample(workerids,30)
wids
head(f[f$workerid %in% wids,])
head(o_agr_pred)
wids=workerid
wids=workerids
f_agr_pred = aggregate(response~predicate*class*noun,data=f[f$workerid %in% wids,],mean)
gof(o_agr_pred$correctresponse,f_agr_pred$response) # r = 0.94, r2 = 0.88
head(o_agr_pred)
nrow(o_agr_pred)
head(f_agr_pred)
nrow(f_agr_perd)
nrow(f_agr_pred)
o_agr_pred = aggregate(correctresponse~predicate*correctclass,data=o,mean)
nrow(o_agr+pred)
nrow(o_agr_pred)
f_agr_pred = aggregate(response~predicate*class,data=f[f$workerid %in% wids,],mean)
nrow(f_agr_pred)
gof(o_agr_pred$correctresponse,f_agr_pred$response) # r = 0.94, r2 = 0.88
gof(o_agr_pred$correctresponse,f_agr_pred$response)$r
gof(o_agr_pred$correctresponse,f_agr_pred$response)[["r"]]
str(gof(o_agr_pred$correctresponse,f_agr_pred$response))
gof(o_agr_pred$correctresponse,f_agr_pred$response)[16]
gof(o_agr_pred$correctresponse,f_agr_pred$response)[17]
rs = c()
rs = c()
r.squareds = c()
o = read.csv("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/analysis/naturalness-duplicated.csv",header=T)
head(o)
f = read.csv("faultless_results.csv",header=T)
head(f)
o_agr_pred = aggregate(correctresponse~predicate*correctclass,data=o,mean)
workerids = unique(f$workerid)
rs = c()
r.squareds = c()
for (i %in% seq(1,100))
{
wids = sample(workerids,30)
f_agr_pred = aggregate(response~predicate*class,data=f[f$workerid %in% wids,],mean)
rs = c(rs,gof(o_agr_pred$correctresponse,f_agr_pred$response)[16])
r.squareds = c(r.squareds,gof(o_agr_pred$correctresponse,f_agr_pred$response)[17])
}
for (i in 1:100)
{
wids = sample(workerids,30)
f_agr_pred = aggregate(response~predicate*class,data=f[f$workerid %in% wids,],mean)
rs = c(rs,gof(o_agr_pred$correctresponse,f_agr_pred$response)[16])
r.squareds = c(r.squareds,gof(o_agr_pred$correctresponse,f_agr_pred$response)[17])
}
rs
r.squareds
mean(rs)
mean(r.squareds)
mean(rs)-ci.low(rs)
mean(rs)+ci.high(rs)
mean(r.squareds)-ci.low(r.squareds)
mean(r.squareds)+ci.high(r.squareds)
boot.ci(rs, type="bca")
head(o_agr_pred)
head(f_agr_pred)
i=1
wids = sample(workerids,30)
f_agr_pred = aggregate(response~predicate*class,data=f[f$workerid %in% wids,],mean)
row.names(f_agr_pred) = f_agr_pred$predicate
rs = c(rs,gof(o_agr_pred$correctresponse,f_agr_pred$response)[16])
r.squareds = c(r.squareds,gof(o_agr_pred$correctresponse,f_agr_pred$response)[17])
o_agr_pred$faultless = f_agr_pred[as.character(o_agr_pred$predicate),]$response
results = boot(data=o_agr_pred, statistic=rsq, R=10000, formula=correctresponse~faultless)
head(results)
boot.ci(results, type="bca")
str(boot.ci(results, type="bca"))
boot.ci(results, type="bca")$bca
boot.ci(results, type="bca")$bca[4]
boot.ci(results, type="bca")$bca[5]
lower.ci = c()
upper.ci = c()
for (i in 1:100)
{
wids = sample(workerids,30)
f_agr_pred = aggregate(response~predicate*class,data=f[f$workerid %in% wids,],mean)
row.names(f_agr_pred) = f_agr_pred$predicate
rs = c(rs,gof(o_agr_pred$correctresponse,f_agr_pred$response)[16])
r.squareds = c(r.squareds,gof(o_agr_pred$correctresponse,f_agr_pred$response)[17])
o_agr_pred$faultless = f_agr_pred[as.character(o_agr_pred$predicate),]$response
results = boot(data=o_agr_pred, statistic=rsq, R=1000, formula=correctresponse~faultless)
lower.ci = c(lower.ci,boot.ci(results, type="bca")[4])
upper.ci = c(upper.ci,boot.ci(results, type="bca")[5])
}
mean(lower.ci)
lower.ci
boot.ci(results, type="bca")
str(boot.ci(results, type="bca"))
boot.ci(results, type="bca")$bca[4]
o = read.csv("~/cogsci/projects/stanford/projects/adjective_ordering/experiments/analysis/naturalness-duplicated.csv",header=T)
head(o)
f = read.csv("faultless_results.csv",header=T)
head(f)
o_agr_pred = aggregate(correctresponse~predicate*correctclass,data=o,mean)
workerids = unique(f$workerid)
rs = c()
r.squareds = c()
lower.ci = c()
upper.ci = c()
for (i in 1:100)
{
wids = sample(workerids,30)
f_agr_pred = aggregate(response~predicate*class,data=f[f$workerid %in% wids,],mean)
row.names(f_agr_pred) = f_agr_pred$predicate
rs = c(rs,gof(o_agr_pred$correctresponse,f_agr_pred$response)[16])
r.squareds = c(r.squareds,gof(o_agr_pred$correctresponse,f_agr_pred$response)[17])
o_agr_pred$faultless = f_agr_pred[as.character(o_agr_pred$predicate),]$response
results = boot(data=o_agr_pred, statistic=rsq, R=1000, formula=correctresponse~faultless)
lower.ci = c(lower.ci,boot.ci(results, type="bca")$bca[4])
upper.ci = c(upper.ci,boot.ci(results, type="bca")$bca[5])
}
mean(rs)
mean(rs)-ci.low(rs)
mean(rs)+ci.high(rs)
mean(r.squareds)
mean(r.squareds)-ci.low(r.squareds)
mean(r.squareds)+ci.high(r.squareds)
mean(lower.ci)
mean(upper.ci)
