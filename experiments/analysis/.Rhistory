geom_bar(stat="identity",width=.05) +
#scale_x_continuous(lim=c(0.38,1.62),breaks=c(0.5,0.7,1,1.3,1.5)) +
scale_x_continuous(breaks=round(seq(from=0,to=round(max(n$value),1),by=.25),1))+
scale_y_continuous(breaks=seq(0,1.24,by=.25)) +
geom_text(aes(label=value,y=p+.075),size=2.5) +
ylab("p(noise value)\n")+
xlab("\nnoise value")+
facet_wrap(~level,nrow=1)
ggsave("noise_plots.pdf",height=2.25,width=6.5)
ggplot(n, aes(x=value,y=p)) +
geom_bar(stat="identity",width=.05) +
#scale_x_continuous(lim=c(0.38,1.62),breaks=c(0.5,0.7,1,1.3,1.5)) +
scale_x_continuous(breaks=round(seq(from=0,to=round(max(n$value),1),by=.2),1))+
scale_y_continuous(breaks=seq(0,1.24,by=.25)) +
geom_text(aes(label=value,y=p+.075),size=2.5) +
ylab("p(noise value)\n")+
xlab("\nnoise value")+
facet_wrap(~level,nrow=1)
ggsave("noise_plots.pdf",height=2.25,width=6.5)
ggplot(n, aes(x=value,y=p)) +
geom_bar(stat="identity",width=.05) +
#scale_x_continuous(lim=c(0.38,1.62),breaks=c(0.5,0.7,1,1.3,1.5)) +
scale_x_continuous(breaks=round(seq(from=0,to=round(max(n$value),1),by=.2),1))+
scale_y_continuous(breaks=seq(0,1.24,by=.25)) +
geom_text(aes(label=value,y=p+.075),size=2.6) +
ylab("p(noise value)\n")+
xlab("\nnoise value")+
facet_wrap(~level,nrow=1)
ggsave("noise_plots.pdf",height=2.25,width=6.5)
s = read.csv("states.csv",header=T)
head(s)
ggplot(s, aes(x=state,y=p)) +
geom_bar(stat="identity",width=.05) +
#scale_x_continuous(lim=c(0.38,1.62),breaks=c(0.5,0.7,1,1.3,1.5)) +
#scale_x_continuous(breaks=round(seq(from=0,to=round(max(n$value),1),by=.2),1))+
#scale_y_continuous(breaks=seq(0,1.24,by=.25)) +
#geom_text(aes(label=value,y=p+.075),size=2.6) +
ylab("p(state)\n")+
xlab("\nstate")+
facet_wrap(~level,nrow=1)
ggplot(s, aes(x=state,y=p)) +
geom_bar(stat="identity") +
#scale_x_continuous(lim=c(0.38,1.62),breaks=c(0.5,0.7,1,1.3,1.5)) +
#scale_x_continuous(breaks=round(seq(from=0,to=round(max(n$value),1),by=.2),1))+
#scale_y_continuous(breaks=seq(0,1.24,by=.25)) +
#geom_text(aes(label=value,y=p+.075),size=2.6) +
ylab("p(state)\n")+
xlab("\nstate")+
facet_wrap(~level,nrow=1)
ggplot(s, aes(x=state,y=p)) +
geom_bar(stat="identity") +
#scale_x_continuous(lim=c(0.38,1.62),breaks=c(0.5,0.7,1,1.3,1.5)) +
#scale_x_continuous(breaks=round(seq(from=0,to=round(max(n$value),1),by=.2),1))+
#scale_y_continuous(breaks=seq(0,1.24,by=.25)) +
#geom_text(aes(label=value,y=p+.075),size=2.6) +
ylab("p(state)\n")+
xlab("\nstate")+
theme(axis.text.x=element_text(angle=90,vjust=1,hjust=1))+
facet_wrap(~level,nrow=1)
ggplot(s, aes(x=state,y=p)) +
geom_bar(stat="identity") +
#scale_x_continuous(lim=c(0.38,1.62),breaks=c(0.5,0.7,1,1.3,1.5)) +
#scale_x_continuous(breaks=round(seq(from=0,to=round(max(n$value),1),by=.2),1))+
#scale_y_continuous(breaks=seq(0,1.24,by=.25)) +
#geom_text(aes(label=value,y=p+.075),size=2.6) +
ylab("p(state)\n")+
xlab("\nstate")+
theme(axis.text.x=element_text(angle=45,vjust=1,hjust=1))+
facet_wrap(~level,nrow=1)
ggsave("state_plots.pdf",height=2.25,width=6.5)
s$level <- factor(s$level,labels=c("full knowledge","partial knowledge"))
ggplot(s, aes(x=state,y=p)) +
geom_bar(stat="identity") +
#scale_x_continuous(lim=c(0.38,1.62),breaks=c(0.5,0.7,1,1.3,1.5)) +
#scale_x_continuous(breaks=round(seq(from=0,to=round(max(n$value),1),by=.2),1))+
#scale_y_continuous(breaks=seq(0,1.24,by=.25)) +
#geom_text(aes(label=value,y=p+.075),size=2.6) +
ylab("p(state)\n")+
xlab("\nstate")+
theme(axis.text.x=element_text(angle=45,vjust=1,hjust=1))+
facet_wrap(~level,nrow=1)
ggsave("state_plots.pdf",height=2.25,width=6.5)
library(lme4)
library(plyr)
library(lmerTest)
library(coin)
library(ggplot2)
setwd("~/Documents/git/CoCoLab/collective/writing/Cubert/plots/")
d = read.table("~/Dropbox/CoCoLab/CollectivePredication/Experiment/Persistence.v14.manipulationcheck4/experiment_persistence.v14-master/Submiterator-master/persistence.v14-trials.tsv",sep="\t",header=T)
d$coll = 0
d[d$choice =="coll_list",]$coll = 1
summary(d)
d$coll = as.factor(as.character(d$coll))
contrasts(d$coll)
contrasts(d$utterance)
contrasts(d$disambiguator)
table(d$utterance, d$disambiguator, d$scenario)
et = droplevels(subset(d, disambiguator != ""))
d_s = bootsSummary(data=d, measurevar="coll", groupvars=c("utterance","disambiguator","scenario"))
d = read.table("~/Dropbox/CoCoLab/CollectivePredication/Experiment/Persistence.v14.manipulationcheck4/experiment_persistence.v14-master/Submiterator-master/persistence.v14-trials.tsv",sep="\t",header=T)
d$coll = 0
d[d$choice =="coll_list",]$coll = 1
summary(d)
d_s = bootsSummary(data=d, measurevar="coll", groupvars=c("utterance","disambiguator","scenario"))
plot <- ggplot(d_s, aes(x=factor(disambiguator,labels=c("bare","each","tog.")),y=coll,fill=scenario)) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=factor(disambiguator,labels=c("bare","each","tog.")), width=0.1),position=position_dodge(width=0.9))+
ylab("collective choice rate \n")+
xlab("\n utterance") +
scale_fill_manual(values=c("red","blue"))
#labs(title="collective choice (95% bootsci)")
plot <- plot  +facet_grid( ~ utterance)
#+ theme_blackDisplay()
plot
ggsave(filename='expt1bootsci.2.pdf')
ggsave(filename='expt1bootsci.2.pdf',width=7.15, height=2.15)
setwd("~/Documents/git/CoCoLab/collective/experiments/2-corpus-based/")
sub = read.table("~/Documents/git/CoCoLab/collective/experiments/2-corpus-based/Submiterator-master/2-corpus-based-subject_information.tsv",sep="\t",header=T)
sub
d = read.table("~/Documents/git/CoCoLab/collective/experiments/2-corpus-based/Submiterator-master/2-corpus-based-trials.tsv",sep="\t",header=T)
#only native English
d <- d[d$workerid!=8&d$workerid!=20&d$workerid!=30&d$workerid!=47&d$workerid!=73,]
s = read.csv("~/Documents/git/CoCoLab/collective/experiments/2-corpus-based/bnc.sentences.csv",header=T)
d = d[!is.na(d$sense)&d$sense=="Yes",]
summary(d)
# just attested sentences
a = d[d$attested=="True",]
## Attested sentence analysis (collapsing over animacy)
a$sentence = paste(a$noun,a$predicate,sep=" ")
a_sent_casted = dcast(data=a, animate + sentence + predicate + noun + workerid ~ sentence_type, value.var="response",mean,na.rm=T)
a_sent_casted$collective = (a_sent_casted$coll/a_sent_casted$dist)
a_sent_casted$coll_diff = (a_sent_casted$coll-a_sent_casted$dist)
a_sent_casted <- na.omit(a_sent_casted)
sentence_s = bootsSummary(data=a_sent_casted, measurevar="coll", groupvars=c("sentence","animate"))
sentence_s$sentence <- factor(sentencen_s$sentence,ordered=is.ordered(sentence_s$sentence))
sentence_plot <- ggplot(sentence_s, aes(x=reorder(sentence,coll,mean),y=coll)) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=reorder(sentence,coll,mean), width=0.1),position=position_dodge(width=0.9))+
#geom_text(size=2,alpha=.5,aes(label=noun),angle=45) +
ylab("collective endorsement\n") +
xlab("\nsentence")+
ylim(0,1) +
theme(axis.text.x=element_text(angle=45,vjust=1,hjust=1,size=7))
sentence_plot
ggsave('results/sentence_plot1.pdf',width=6.3,height=3.5)
ggsave('results/sentence_plot2.pdf',width=6.3,height=3.5)
head(a_sent_casted)
p_n <- a_sent_casted[a_sent_casted$predicate=="bright"|
a_sent_casted$predicate=="closed"|
a_sent_casted$predicate=="friendly"|
a_sent_casted$predicate=="full"|
a_sent_casted$predicate=="guilty"|
a_sent_casted$predicate=="open"|
a_sent_casted$predicate=="quiet"|
a_sent_casted$predicate=="small",]
summary(p_n)
n_pred_s = bootsSummary(data=p_n, measurevar="coll", groupvars=c("noun","predicate"))
n_pred_s$noun <- factor(n_pred_s$noun,ordered=is.ordered(pred_s$noun))
n_pred_s$noun <- factor(n_pred_s$noun,ordered=is.ordered(n_pred_s$noun))
n_pred_plot <- ggplot(n_pred_s, aes(x=reorder(noun,coll,mean),y=coll)) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=reorder(noun,coll,mean), width=0.1),position=position_dodge(width=0.9))+
#geom_text(size=2,alpha=.5,aes(label=noun),angle=45) +
ylab("collective endorsement\n") +
xlab("\nsubject noun")+
ylim(0,1) +
theme(axis.text.x=element_text(angle=45,vjust=1,hjust=1)) +
facet_wrap(~predicate,nrow=2,scales="free_x")
n_pred_plot
ggsave('results/noun_pred_plot2.pdf',width=5.9,height=4)
library(lme4)
library(plyr)
library(lmerTest)
library(coin)
library(ggplot2)
library(reshape2)
library(gridExtra)
setwd("~/Documents/git/CoCoLab/collective/experiments/7-bht-corpus/")
sub = read.table("Submiterator-master/bht-corpus-subject_information.tsv",sep="\t",header=T)
sub
d = read.table("Submiterator-master/bht-corpus-trials.tsv",sep="\t",header=T)
#only native English
d <- d[d$workerid!=16&d$workerid!=17&d$workerid!=18&d$workerid!=27,]
# sense rates
d$sentence = paste(d$noun,d$predicate,sep=" ")
d = d[!is.na(d$sense)&d$sense=="Yes",]
d = d[!is.na(d$sense)&d$sense=="Yes",]
summary(d)
# just attested sentences
a = d[d$attested=="True",]
# all sentences
#a <- d
## Attested sentence analysis (collapsing over animacy)
a_sent_casted = dcast(data=a, animate + sentence + predicate + noun + workerid ~ sentence_type, value.var="response",mean,na.rm=T)
a_sent_casted$collective = (a_sent_casted$coll/a_sent_casted$dist)
a_sent_casted$coll_diff = (a_sent_casted$coll-a_sent_casted$dist)
a_sent_casted <- na.omit(a_sent_casted)
head(a_sent_casted)
all <- a_sent_casted
all_s = bootsSummary(data=all, measurevar="coll", groupvars=c("noun",'predicate'))
all_s$noun <- factor(all_s$noun,ordered=is.ordered(all_s$noun))
all_plot <- ggplot(all_s, aes(x=reorder(noun,coll,mean),y=coll)) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=reorder(noun,coll,mean), width=0.1),position=position_dodge(width=0.9))+
#geom_text(size=2,alpha=.5,aes(label=noun),angle=45) +
ylab("collective endorsement\n") +
xlab("\nsubject noun")+
ylim(0,1) +
theme(axis.text.x=element_text(angle=45,vjust=1,hjust=1))+
facet_wrap(~predicate,ncol=3,scale="free_x")
all_plot
ggsave("results/bht_plot2.pdf",width=6,height=2.7)
d = read.csv("~/Dropbox/CoCoLab/CollectivePredication/Experiment/Persistence.v10.everything/experiment_persistence.v10-master/Submiterator-master/persistence.v10-trials.order.csv",header=T)
# counts and raw values
table(d$sceanrio,d$context)
aggregate(response~sceanrio*sentence_type*context*utterance,d,mean)
# reshape data
d = dcast(data=d, workerid + trial + utterance + sceanrio + context ~ sentence_type, value.var="response",mean)
# nomarlized collectivity score
d$collective = (d$coll / (d$coll + d$dist))
d$collective_ratio = (d$coll / d$dist)
d$coll_diff = (d$coll - d$dist)
setwd("~/Documents/git/CoCoLab/collective/writing/Cubert/plots")
d_s = bootsSummary(data=d, measurevar="collective", groupvars=c("context","utterance","sceanrio"))
plot <- ggplot(d_s, aes(x=factor(context,labels=c("high","low")),y=collective,fill=sceanrio)) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=factor(context,labels=c("high","low")), width=0.1),position=position_dodge(width=0.9))+
ylab("endorsement \n")+
#ylim(0,1)+
xlab("\n variability of context") +
labs(title="normalized collective (95% bootsci)")+
scale_fill_manual(values=c("blue","red"))
plot <- plot  +facet_grid(. ~ utterance) #+ theme_blackDisplay() #+ theme(legend.position="bottom", legend.margin=unit(-.7,"cm") )
plot
d_s
d_raw = read.csv("~/Dropbox/CoCoLab/CollectivePredication/Experiment/Persistence.v10.everything/experiment_persistence.v10-master/Submiterator-master/persistence.v10-trials.order.csv",header=T)
d_casted = dcast(data=d_raw, workerid + trial + utterance + sceanrio + context ~ sentence_type, value.var="response",mean)
raw_s = bootsSummary(data=d_raw, measurevar="response", groupvars=c("sentence_type","context","utterance","sceanrio"))
raw_plot <- ggplot(raw_s, aes(x=context,y=response,fill=factor(sentence_type,labels=c("collective","distributive")))) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=context, width=0.1),position=position_dodge(width=0.9))+
ylab("endorsement (out of 1)\n")+
ylim(0,1)+
xlab("\n variability of context") +
labs(fill="paraphrase")+
scale_fill_manual(values=c("red", "blue"))
raw_plot <- raw_plot  +facet_grid(sceanrio ~ utterance)
#+ theme_blackDisplay()
raw_plot
ggsave("expt2rawbootsci2.pdf")
ggsave("expt2rawbootsci2.pdf",width=6,height=4)
ggsave("expt2rawbootsci2.pdf",width=6,height=2.7)
ggsave("expt2rawbootsci2.pdf",width=5,height=2.7)
ggsave("expt2rawbootsci2.pdf",width=6,height=2.7)
setwd("~/Documents/git/cocolab/collective/model/")
setwd("~/Documents/git/CoCoLab/collective/writing/Cubert/plots/")
d = read.csv("plural-predication.csv",header=F)
#colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","p")
#colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","obj3","p")
colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","obj3","obj4","p")
head(d)
d$noise <-factor(d$noise,levels=c("high","mid",'low','no'))
#d$k <-factor(d$k,levels=c("partial","full"))
d$numobjs <- factor(d$numobjs)
#d$state = paste(d$obj1,d$obj2)
#d$state = paste(d$obj1,d$obj2,d$obj3)
d$state = paste(d$obj1,d$obj2,d$obj3,d$obj4)
d$state <- factor(d$state)
#d$KL <- factor(d$KL)
d$p <- as.numeric(as.character(d$p))
d$k = "partial"
d[d$knowledge=="true",]$k = "full"
head(d)
# check effect direction for inferred thetas
agg <- aggregate(p~noise*k,d[d$collective=="true",],sum)
head(d)
d = read.csv("plural-predication.csv",header=F)
head(d)
d = read.csv("plural-predication.csv",header=F)
head(d)
setwd("~/Documents/git/cocolab/collective/model/")
d = read.csv("plural-predication.csv",header=F)
#colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","p")
#colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","obj3","p")
colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","obj3","obj4","p")
head(d)
d$noise <-factor(d$noise,levels=c("high","mid",'low','no'))
#d$k <-factor(d$k,levels=c("partial","full"))
d$numobjs <- factor(d$numobjs)
#d$state = paste(d$obj1,d$obj2)
#d$state = paste(d$obj1,d$obj2,d$obj3)
d$state = paste(d$obj1,d$obj2,d$obj3,d$obj4)
d$state <- factor(d$state)
#d$KL <- factor(d$KL)
d$p <- as.numeric(as.character(d$p))
d$k = "partial"
d[d$knowledge=="true",]$k = "full"
head(d)
# check effect direction for inferred thetas
agg <- aggregate(p~noise*k,d[d$collective=="true",],sum)
p <- ggplot(agg,aes(x=noise,y=p)) +
geom_bar(stat='identity',position=position_dodge(),aes(fill=k)) +
ylab("probability of\ncollective interpretation\n") +
xlab("\ncollective interpretation noise")+
labs(fill="speaker\nknowledge\naccess")+
scale_fill_manual(values=c("red", "blue"))+
theme(axis.text.x = element_text(size=10,angle=0))#+
#facet_grid(dist_theta~coll_theta)
p
setwd("~/Documents/git/CoCoLab/collective/writing/Cubert/plots/")
ggsave("model-results2.pdf")
ggsave("model-results2.pdf",height=3)
setwd("~/Documents/git/CoCoLab/collective/model/")
d = read.csv("plural-predication-big.csv",header=F)
#colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","p")
#colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","obj3","p")
colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","obj3","obj4","p")
head(d)
#d$noise <-factor(d$noise,levels=c("low","mid","high"))
#d$k <-factor(d$k,levels=c("partial","full"))
d$numobjs <- factor(d$numobjs)
#d$state = paste(d$obj1,d$obj2)
#d$state = paste(d$obj1,d$obj2,d$obj3)
d$state = paste(d$obj1,d$obj2,d$obj3,d$obj4)
d$state <- factor(d$state)
#d$KL <- factor(d$KL)
d$p <- as.numeric(as.character(d$p))
#d$k = "partial"
#d[d$knowledge=="true",]$k = "full"
head(d)
# check effect direction for inferred thetas
agg <- aggregate(p~noise,d[d$collective=="true",],sum)
agg
# a=2     .1414
# a=1.8   .1451
# a=1.75  .1462
# a=1.6   .1488
# a=1.5   .1501
# a-1.45  .1505
# a=1.4   .1507
# a=1.375 .1507
# a=1.35  .1507
# a=1.3   .1504
p <- ggplot(agg,aes(x=noise,y=p)) +
geom_bar(stat='identity',position=position_dodge(),aes(fill=k)) +
ylab("probability of\ncollective interpretation\n") +
xlab("\ncollective interpretation noise")+
labs(fill="speaker\nknowledge\naccess")+
scale_fill_manual(values=c("red", "blue"))+
theme(axis.text.x = element_text(size=10,angle=0))#+
#facet_grid(dist_theta~coll_theta)
p
setwd("~/Documents/git/CoCoLab/collective/model/")
d = read.csv("plural-predication-big.csv",header=F)
#colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","p")
#colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","obj3","p")
colnames(d) <- c("noise","numobjs","knowledge","collective","obj1","obj2","obj3","obj4","p")
head(d)
d
heavy = read.csv("~/Documents/git/CoCoLab/collective/writing/Cubert/plots/heavy2.csv",header=T)
head(heavy)
heavy$context <- factor(heavy$context,labels=c("variable","predictable"))
heavy_plot <- ggplot(heavy, aes(x=data,y=coll,fill=scenario)) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=data, width=0.1),position=position_dodge(width=0.9),color="gray")+
ylab("collective endorsement\np(collective)\n")+
ylim(0,1)+
xlab("") +
labs(fill="scenario")+
scale_fill_manual(values=c("cyan", "orange"))+
facet_grid(.~context)
#raw_plot <- raw_plot  +facet_grid(. ~ utterance)
#theme_blackDisplay()
heavy_plot
heavy_plot <- ggplot(heavy, aes(x=data,y=coll,fill=scenario)) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=data, width=0.1),position=position_dodge(width=0.9))+
ylab("collective endorsement\np(collective)\n")+
ylim(0,1)+
xlab("") +
labs(fill="scenario")+
#scale_fill_manual(values=c("cyan", "orange"))+
facet_grid(.~context)
#raw_plot <- raw_plot  +facet_grid(. ~ utterance)
#theme_blackDisplay()
heavy_plot
heavy_plot <- ggplot(heavy, aes(x=data,y=coll,fill=scenario)) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=data, width=0.1),position=position_dodge(width=0.9))+
ylab("collective endorsement\np(collective)\n")+
ylim(0,1)+
xlab("") +
labs(fill="scenario")+
scale_fill_manual(values=c("red", "blue"))+
facet_grid(.~context)
#raw_plot <- raw_plot  +facet_grid(. ~ utterance)
#theme_blackDisplay()
heavy_plot
ggsave("~/Documents/git/CoCoLab/collective/writing/Cubert/plots/heavymodel2.pdf")
heavy$context <- factor(heavy$context,labels=c("random","regular"))
heavy_plot <- ggplot(heavy, aes(x=data,y=coll,fill=scenario)) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=data, width=0.1),position=position_dodge(width=0.9))+
ylab("collective endorsement\np(collective)\n")+
ylim(0,1)+
xlab("\nsource of data") +
labs(fill="scenario")+
scale_fill_manual(values=c("red", "blue"))+
facet_grid(.~context)
#raw_plot <- raw_plot  +facet_grid(. ~ utterance)
#theme_blackDisplay()
heavy_plot
ggsave("~/Documents/git/CoCoLab/collective/writing/Cubert/plots/heavymodel2.pdf",height=3)
## big-tall plot
bigtall = read.csv("~/Documents/git/CoCoLab/collective/writing/Cubert/plots/big-tall.csv",header=T)
bt_plot <- ggplot(bigtall, aes(x=data,y=coll,fill=factor(context,labels=c("random","regular")))) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=data, width=0.1),position=position_dodge(width=0.9))+
ylab("collective endorsement\np(collective)\n")+
ylim(0,1)+
xlab("") +
labs(fill="context")+
scale_fill_manual(values=c("red", "blue"))+
facet_grid(.~predicate)
bt_plot
bt_plot <- ggplot(bigtall, aes(x=data,y=coll,fill=factor(context,labels=c("random","regular")))) +
#  geom_bar(alpha=1/2,stat="identity",position=position_dodge()) +
geom_bar(stat="identity",position=position_dodge()) +
geom_errorbar(aes(ymin=bootsci_low, ymax=bootsci_high, x=data, width=0.1),position=position_dodge(width=0.9))+
ylab("collective endorsement\np(collective)\n")+
ylim(0,1)+
xlab("\nsource of data") +
labs(fill="context")+
scale_fill_manual(values=c("red", "blue"))+
facet_grid(.~predicate) #+
#theme_blackDisplay()
#raw_plot <- raw_plot  +facet_grid(. ~ utterance)
#+ theme_blackDisplay()
bt_plot
ggsave("bigtallmodel2.pdf",height=3)
ggsave("~/Documents/git/CoCoLab/collective/writing/Cubert/plots/bigtallmodel2.pdf",height=3)
setwd("~/Documents/git/cocolab/adjective_ordering/experiments/analysis")
f = read.csv("faultless_results.csv",header=T)
head(f)
s = read.csv("subjectivity_results.csv",header=T)
head(s)
o = read.csv("order-preference_results.csv",header=T)
head(f)
aggregate(response~class,data=f,mean)
f_agr = aggregate(response~class,data=f,mean)
library(hydroGOF)
head(s)
s_agr = aggregate(response~class,data=s,mean)
gof(f_agr$response,s_agr$response)
gof(f_agr$response,s_agr$response,do.Spearman=T)
gof(f_agr$response,s_agr$response,do.Spearman=TRUE)
head(f)
f_agr = aggregate(response~predicate,data=f,mean)
s_agr = aggregate(response~predicate,data=s,mean)
#compare faultless and subjectivity
gof(f_agr$response,s_agr$response,do.Spearman=TRUE)
#load in order-preference
o = read.csv("order-preference_results.csv",header=T)
head(s_agr)
s_agr$expt = "subjectivity"
f_agr$expt = "faultless"
fs = rbing(s_agr,f_agr)
fs = rbind(s_agr,f_agr)
head(fs)
f = read.csv("faultless_results.csv",header=T)
head(f)
f_agr = aggregate(response~predicate,data=f,mean)
#load in subjectivity
s = read.csv("subjectivity_results.csv",header=T)
head(s)
s_agr = aggregate(response~predicate,data=s,mean)
fs <- f_agr
fs$subjectivity = NA
fs$subjectivity = s_agr$response[match(fs$predicate,s_agr$predicate)]
head(fs)
ggplot(fs, aes(x=response,y=subjectivity)) +
geom_point() +
geom_smooth(method=lm)
ggplot(fs, aes(x=response,y=subjectivity)) +
geom_point() +
geom_smooth(method=lm) +
xlab("faultless disagreement")
ggplot(fs, aes(x=response,y=subjectivity)) +
geom_point() +
geom_smooth(method=lm) +
xlab("\nfaultless disagreement")+
ylab("subjectivity\n")
gof(f_agr$response,s_agr$response,do.Spearman=TRUE)
gof(f_agr$response,f_agr$response,do.Spearman=TRUE)
gof(f_agr$response,do.Spearman=TRUE)
gof(f_agr$response)
gof(f_agr$response,s_agr$response,do.Spearman=TRUE)
gof(f_agr$response,f_agr$response,do.Spearman=TRUE)
install.packages("hydroGOF")
install.packages("hydroGOF")
library(hydroGOF)
gof(f_agr$response,f_agr$response,do.Spearman=TRUE)
f_agr$response
gof(f$response,f$response,do.Spearman=TRUE)
