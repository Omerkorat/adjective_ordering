;; set membership
(define (member-of e elements)
  (if (> (length elements) 0)
      (if (equal? e (first elements))
          #t
          (member-of e (rest elements)))
      #f))

;; prune zero-probability cases from a distribution
(define (prune enumeration-result)
  (define items (first enumeration-result))
  (define probabilities (second enumeration-result))
  (fold
   (lambda (x p acc) (if (> p 0)
                         (list (cons x (first acc)) (cons p (second acc)))
                         acc
                         ))
   '(() ())
   items
   probabilities
   )
  )

;; helper function for speaker optimality
(define (power lst alpha) (map (lambda (x) (expt x alpha)) lst))
(define (topower dist alpha) (list (first dist)
                                   (power (second dist) alpha)))

;; some individuals (lists) with two scalar properties
(define individuals 
  '((1 1) ;(1 2) (2 1) (1 3) (3 1)
    (2 2) (2 3) (3 2) 
    (3 3)
    ))
(define (individual-prior) 
  (uniform-draw individuals))

;; noun denotation as a distribution of individuals
(define noun-denotation
  (enumeration-query
   (define thing (individual-prior))
   thing
   #t))

;; properties (find specific element of a list)
(define P1 first)
(define P2 second)

;; make a scalar property (take a property and relate it to a threshold)
(define (scalar-property PROPERTY THETA) 
  (lambda (x)  
    (>= (PROPERTY x) THETA)))

;; noise-ify a property
(define (noiseify PROPERTY NOISE)
  (lambda (x)
    (if (PROPERTY x)
        ;;         #t
        ;;         #f)))
        (flip (- 1 NOISE))
        (flip NOISE))))

;; threshold priors
(define (prior-maker PROPERTY NOMINAL)
  (enumeration-query
   (define thing (individual-prior))
   (PROPERTY thing)
   (condition (member-of thing (first NOMINAL)))))

;; ;; modification (create a new distribution via conditioning)
;; (define (modification ADJ NOUN)
;;   (enumeration-query
;;    (define thing (apply multinomial NOUN))   
;;    thing  
;;    (ADJ thing)))

;; ;; modification (create a new distribution via conditioning)
;; (define (modification ADJ NOUN)
;;   (prune
;;    (enumeration-query
;;     (define thing (apply multinomial NOUN))   
;;     thing  
;;     (condition (if (ADJ thing) (flip 1) (flip (exp -1)))))))

;; SOFT modification (create a new distribution via factoring)
(define (modification ADJ NOUN)
  (prune
   (enumeration-query
    (define thing (apply multinomial NOUN))   
    thing  
    (factor 
     (if (ADJ thing) 
         0 
         -1000)))
   )
  )

;; ;; ;; predicativization (turn a nominal into a predicate)
;; (define (pred NOMINAL)
;;   (lambda (x) (member-of x (first NOMINAL))))

(define (pred NOMINAL)
  (lambda (x) (equal? (apply multinomial (prune NOMINAL)) x))
  )

;; indefinite article
(define (indefinite NOMINAL)
  (apply multinomial NOMINAL))

;; utterance prior
(define utterances 
  ;;   '(property-1 property-2 property-1-2 property-2-1 p1-and-p2 null))
  ;;   '(property-1 property-2 property-1-2 property-2-1 p1-and-p2))
  ;;   '(property-1 property-2 property-1-2 property-2-1))
;;   '(n-property-1 n-property-2 n-property-1-2 n-property-2-1))
  '(n-p1-and-p2 n-property-1-2 n-property-2-1 null))
;;   '(property-1-2 property-2-1))
;;     '(n-property-1-2 n-property-2-1 null))
;;   '(n-property-1-2 n-property-2-1 property-1-2 property-2-1))
(define (utterance-prior)
  (uniform-draw utterances))

;; meaning function
(define (meaning utterance x P1-theta P2-theta NOISE1 NOISE2)
  (case utterance
        (('property-1)
         ((pred (modification (scalar-property P1 P1-theta) noun-denotation)) x))
        (('n-property-1)
         ((pred (modification (noiseify (scalar-property P1 P1-theta) NOISE1) noun-denotation)) x))
        (('property-2)
         ((pred (modification (scalar-property P2 P2-theta) noun-denotation)) x))
        (('n-property-2)
         ((pred (modification (noiseify (scalar-property P2 P2-theta) NOISE2) noun-denotation)) x))
        (('property-2-1)
         ((pred (modification (scalar-property P2 P2-theta) 
                              (modification (scalar-property P1 P1-theta) noun-denotation))) x))
        (('n-property-2-1)
         ((pred (modification (noiseify (scalar-property P2 P2-theta) NOISE2) 
                              (modification (noiseify (scalar-property P1 P1-theta) NOISE1) noun-denotation))) x))
        (('p1-and-p2)
         (and (and ((scalar-property P1 P1-theta) x) 
                   ((scalar-property P2 P2-theta) x))
              ((pred noun-denotation) x)))
        (('n-p1-and-p2)
         (and (and ((noiseify (scalar-property P1 P1-theta) NOISE1) x) 
                   ((noiseify (scalar-property P2 P2-theta) NOISE2) x))
              ((pred noun-denotation) x)))
        (('property-1-2)
         ((pred (modification (scalar-property P1 P1-theta) 
                              (modification (scalar-property P2 P2-theta) noun-denotation))) x))
        (('n-property-1-2)
         ((pred (modification (noiseify (scalar-property P1 P1-theta) NOISE1)
                              (modification (noiseify (scalar-property P2 P2-theta) NOISE2) noun-denotation))) x))
        (('null)
         #t)
        ))

;; calculate P1-theta
(define (P1-theta-fun utterance)
  (case utterance 
        (('property-1-2)
         (lambda (P2-theta) (apply multinomial (prior-maker P1
                                                            (modification 
                                                             (scalar-property P2 P2-theta) 
                                                             ;;                                                              (noiseify (scalar-property P2 P2-theta) NOISE2)
                                                             noun-denotation)
                                                            ))))
        (('n-property-1-2)
         (lambda (P2-theta) (apply multinomial (prior-maker P1
                                                            (modification 
                                                             (scalar-property P2 P2-theta) 
                                                             ;;                                                              (noiseify (scalar-property P2 P2-theta) NOISE2)
                                                             noun-denotation)
                                                            ))))
        (else
         (apply multinomial (prior-maker P1 noun-denotation)))
        ))
;; calculate P2-theta
(define (P2-theta-fun utterance) 
  (case utterance
        (('property-2-1)
         (lambda (P1-theta) (apply multinomial (prior-maker P2
                                                            (modification 
                                                             (scalar-property P1 P1-theta) 
                                                             ;;                                                              (noiseify (scalar-property P1 P1-theta) NOISE1)
                                                             noun-denotation)
                                                            ))))
        (('n-property-2-1)
         (lambda (P1-theta) (apply multinomial (prior-maker P2
                                                            (modification 
                                                             (scalar-property P1 P1-theta) 
                                                             ;;                                                              (noiseify (scalar-property P1 P1-theta) NOISE1)
                                                             noun-denotation)
                                                            ))))
        (else
         (apply multinomial (prior-maker P2 noun-denotation)))
        ))

;; S2 model
(define prag-speaker
  (mem
   (lambda (state NOISE1 NOISE2)
     (enumeration-query
      (define utterance (utterance-prior))
      utterance
      (condition (equal? state 
                         (apply multinomial 
                                (prag-listener utterance NOISE1 NOISE2))))
      ))))

;; L1
(define prag-listener
  (mem
   (lambda (utterance NOISE1 NOISE2)
     (enumeration-query
      (define state (individual-prior))
      (define P1-theta ;; order-dependent prior on P1
        (case utterance
              (('property-1-2)
               ((P1-theta-fun utterance) (P2-theta-fun utterance)))
              (('n-property-1-2)
               ((P1-theta-fun utterance) (P2-theta-fun utterance)))
              (else
               (P1-theta-fun utterance))
              ))
      (define P2-theta ;; order-dependent prior on P2
        (case utterance
              (('property-2-1)
               ((P2-theta-fun utterance) (P1-theta-fun utterance)))
              (('n-property-2-1)
               ((P2-theta-fun utterance) (P1-theta-fun utterance)))
              (else
               (P2-theta-fun utterance))
              ))
      ;;             (define P1-theta (apply multinomial (prior-maker P1 noun-denotation)))
      ;;             (define P2-theta (apply multinomial (prior-maker P2 noun-denotation)))

      state
      ;;       (list P1-theta P2-theta)

      (condition (equal? utterance 
                         (apply multinomial 
                                (topower (speaker state P1-theta P2-theta NOISE1 NOISE2)
                                         speaker-opt
                                         ))))
      ))))

;; S1
(define speaker 
  (mem
   (lambda (state P1-theta P2-theta NOISE1 NOISE2)
     (enumeration-query
      (define utterance (utterance-prior))
      utterance
      (condition (equal? state
                         (apply multinomial 
                                (lit-listener utterance P1-theta P2-theta NOISE1 NOISE2))))
      ))))

;; L0
(define lit-listener
  (mem
   (lambda (utterance P1-theta P2-theta NOISE1 NOISE2)
     (enumeration-query
      (define state (individual-prior))
      state
      (condition (meaning utterance state P1-theta P2-theta NOISE1 NOISE2))
      ))))

(define speaker-opt 1)

;; (define NOISE1 0.01)
;; (define NOISE2 0.1)

;; (barplot (lit-listener 'n-property-1-2 2 1) "lit-listener 'property-1-2")
;; (barplot (lit-listener 'n-property-2-1 2 1) "lit-listener 'property-2-1")

;; (barplot (lit-listener 'property-1-2 2 1) "lit-listener 'property-1-2")
;; (barplot (lit-listener 'property-2-1 2 1) "lit-listener 'property-2-1")

;; (barplot (speaker '(3 2) 2 2))

;; (barplot (prag-listener 'property-1) "inferred state for 'property-1'")
;; (barplot (prag-listener 'property-2) "inferred state for 'property-2'")
;; (barplot (prag-listener 'property-1-2) "inferred state for 'property-1-2'")
;; (barplot (prag-listener 'property-2-1) "inferred state for 'property-2-1'")

;; (barplot (prag-listener 'n-property-1) "inferred state for 'property-1'")
;; (barplot (prag-listener 'n-property-2) "inferred state for 'property-2'")
;; (barplot (prag-listener 'n-property-1-2) "inferred state for 'n-property-1-2'")
;; (barplot (prag-listener 'n-property-2-1) "inferred state for 'n-property-2-1'")


(barplot (prag-speaker '(2 2) 0.01 0.01) "utterance for '(2 2) state with equal noise")
(barplot (prag-speaker '(2 2) 0.01 0.3) "utterance for '(2 2) state with prop-2 noise")
(barplot (prag-speaker '(3 2) 0.01 0.01) "utterance for '(3 2) state with equal noise")
(barplot (prag-speaker '(3 2) 0.01 0.3) "utterance for '(3 2) state with prop-2 noise")

;; (prag-speaker '(2 2))

;; (barplot (modification (noiseify (scalar-property P1 3) 0) noun-denotation))
;; (barplot (modification (scalar-property P1 3) noun-denotation))
;; (barplot (modification (noiseify (scalar-property P2 3) 0) noun-denotation))
;; (barplot (modification (scalar-property P2 3) noun-denotation))
;; (modification (scalar-property P1 2) noun-denotation)


;; (meaning 'n-property-2 '(2 2) 2 2)
